{# Get the Upload Form from the formID#} {% set form = uploaderForm(formID) %} {# Uppy script and style #}
<script src="https://releases.transloadit.com/uppy/v5.1.5/uppy.min.js"></script>
<link rel="stylesheet" href="https://releases.transloadit.com/uppy/v5.1.5/uppy.css" />
<style>
    /* Make Uppy Dashboard full width */
    .uppy-Dashboard,
    .uppy-Dashboard-inner {
        max-width: 100% !important;
        width: 100% !important;
    }
</style>

<script>
    const userId = {{ userID |json_encode|raw }};
    const formId = {{ formID |json_encode | raw }};

    document.addEventListener("DOMContentLoaded", function() {
        // Build endpoint
        const currentPath = window.location.pathname.replace(/\/+$/, '');
        const endpoint = currentPath.match(new RegExp(formId + '$'))
            ? currentPath + '/upload'
            : '/mercator/uploader/endpoint/' + formId + '/' + userId;

        // Allowed file types (as .ext)
        const allowedTypesStr = "{{ form.allowed_types|split(',')|map(t => '.' ~ t|trim)|join(',') }}";
        const allowedTypes = allowedTypesStr
            ? allowedTypesStr.split(',').map(s => s.trim()).filter(Boolean)
            : null;

        // Convert MB to bytes, or null if not set
        const maxFileSize = {{ form.max_file_size and form.max_file_size > 0 ? (form.max_file_size * 1024 * 1024) : 'null' }};
        const maxTotalFileSize = {{ form.max_total_file_size and form.max_total_file_size > 0 ? (form.max_total_file_size * 1024 * 1024) : 'null' }};

        const notes = [];
        if (allowedTypes) notes.push('Allowed: ' + allowedTypes.join(' '));
        if (maxFileSize !== null) notes.push('Max per file: {{ form.max_file_size }} MB');
        if (maxTotalFileSize !== null) notes.push('Total: {{ form.max_total_file_size }} MB');

        const uppy = new Uppy.Uppy({
            autoProceed: {{ form.auto_upload_enabled ? 'true' : 'false' }},
            allowMultipleUploadBatches: true,
            restrictions: {
                maxNumberOfFiles: null,
                allowedFileTypes: allowedTypes,
                maxFileSize: (maxFileSize === 'null') ? null : maxFileSize,
                maxTotalFileSize: (maxTotalFileSize === 'null') ? null : maxTotalFileSize
            }
        })
        .use(Uppy.Dashboard, {
            inline: true,
            target: '#uppy',
            proudlyDisplayPoweredByUppy: false,
            showProgressDetails: true,
            note: notes.join(' | ')
        })
        {% if form.use_image_editor and not form.auto_upload_enabled %}
        .use(Uppy.ImageEditor)
        {% endif %}
        {% if form.client_resize_enabled %}
            .use(Uppy.Compressor, {
                quality: {{ (form.client_resize_quality ?? 0.8) + 0 }},
                maxWidth: {{ form.client_resize_max_width ?? 1920 }},
                maxHeight: {{ form.client_resize_max_height ?? 1080 }},
                preserveExif: {{ form.preserve_exif ? 'true' : 'false' }}
            })
        {% endif %}
        .use(Uppy.Webcam)
        .use(Uppy.Audio)
        .use(Uppy.ScreenCapture)
        .use(Uppy.XHRUpload, {
            endpoint: endpoint,
            fieldName: 'file',
            formData: true,
            allowMultipleUploads: true
        })
        .on('upload-success', function (file, response) {
            UIkit.notification({ message: 'Upload successfully completed.', status: 'success' });
        })
        .on('upload-error', function (file, error, response)  {
            UIkit.notification({ message: response.body, status: 'danger' });
        })
        .on('restriction-failed', function (file, error) {
            UIkit.notification({ message: error, status: 'warning' });
        });
    });
</script>