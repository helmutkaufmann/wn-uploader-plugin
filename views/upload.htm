<!doctype html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>{{ form.title }}</title>
        <meta name="csrf-token" content="{{ csrf }}" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="stylesheet" href="https://releases.transloadit.com/uppy/v5.1.5/uppy.css" />
        <style>
            /* Make Uppy Dashboard full width */
            .uppy-Dashboard {
                max-width: 100% !important;
                width: 100% !important;
            }
            .uppy-Dashboard-inner {
                max-width: 100% !important;
                width: 100% !important;
            }
        </style>
    </head>
    <body class="uk-container uk-margin">
        {# prefer the explicit field; otherwise take ?id=XXX from the page URL #} {% if not
        uploaderUserIsPermissioned(id, user) %}
        <div class="uk-container uk-margin">
            <div class="uk-alert-danger uk-card uk-card-body">Upload form not found or user not permissioned.</div>
        </div>
        {% else %} {# UIKit #}
        <script defer src="https://cdn.jsdelivr.net/npm/uikit@3.24.1/dist/js/uikit.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/uikit@3.24.1/dist/css/uikit.min.css" />

        {# Uppy script and Link #}
        <script src="https://cdn.jsdelivr.net/npm/uppy@5.1.5/dist/uppy.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/uppy@5.1.5/dist/uppy.min.css" />
        <style>
            /* Make Uppy Dashboard full width */
            .uppy-Dashboard,
            .uppy-Dashboard-inner {
                max-width: 100% !important;
                width: 100% !important;
            }
        </style>

        {% set form = uploaderForm(id) %}
        <div class="uk-card uk-card-default uk-card-body uk-margin">
            <h3 class="uk-margin-small">{{ form.title }}</h3>
            {% if form.description %}
            <p class="uk-text-meta">{{ form.description|raw }}</p>
            {% endif %}

            <div id="uppy" class="uk-margin"></div>
        </div>

        <script>
            // Get the userID from the server-side variable
            const userId = {{ user|json_encode|raw }};

            document.addEventListener("DOMContentLoaded", function() {
                // Build endpoint
                const currentPath = window.location.pathname.replace(/\/+$/, '');
                const formId = {{ form.form_id|json_encode|raw }};
                const endpoint = currentPath.match(new RegExp(formId + '$'))
                    ? currentPath + '/upload'
                    : '/mercator/uploader/endpoint/' + formId + '/' + userId;

                // Allowed file types (as .ext)
                const allowedTypesStr = "{{ form.allowed_types|split(',')|map(t => '.' ~ t|trim)|join(',') }}";
                const allowedTypes = allowedTypesStr
                    ? allowedTypesStr.split(',').map(s => s.trim()).filter(Boolean)
                    : null;

                // Convert MB to bytes, or null if not set
                const maxFileSize = {{ form.max_file_size and form.max_file_size > 0 ? (form.max_file_size * 1024 * 1024) : 'null' }};
                const maxTotalFileSize = {{ form.max_total_file_size and form.max_total_file_size > 0 ? (form.max_total_file_size * 1024 * 1024) : 'null' }};

                const notes = [];
                if (allowedTypes) notes.push('Allowed: ' + allowedTypes.join(' '));
                if (maxFileSize !== null) notes.push('Max per file: {{ form.max_file_size }} MB');
                if (maxTotalFileSize !== null) notes.push('Total: {{ form.max_total_file_size }} MB');

                const uppy = new Uppy.Uppy({
                    autoProceed: {{ form.auto_upload_enabled ? 'true' : 'false' }},
                    allowMultipleUploadBatches: true,
                    restrictions: {
                        maxNumberOfFiles: null,
                        allowedFileTypes: allowedTypes,
                        maxFileSize: (maxFileSize === 'null') ? null : maxFileSize,
                        maxTotalFileSize: (maxTotalFileSize === 'null') ? null : maxTotalFileSize
                    }
                })
                .use(Uppy.Dashboard, {
                    inline: true,
                    target: '#uppy',
                    proudlyDisplayPoweredByUppy: false,
                    showProgressDetails: true,
                    note: notes.join(' | ')
                })
                {% if form.use_image_editor %}
                .use(Uppy.ImageEditor)
                {% endif %}
                {% if form.client_resize_enabled %}
                    .use(Uppy.Compressor, {
                        quality: {{ (form.client_resize_quality ?? 0.8) + 0 }},
                        maxWidth: {{ form.client_resize_max_width ?? 1920 }},
                        maxHeight: {{ form.client_resize_max_height ?? 1080 }},
                        preserveExif: {{ form.preserve_exif ? 'true' : 'false' }}
                    })
                {% endif %}
                .use(Uppy.Webcam)
                .use(Uppy.Audio)
                .use(Uppy.ScreenCapture)
                .use(Uppy.XHRUpload, {
                    endpoint: endpoint,
                    fieldName: 'file',
                    formData: true,
                    allowMultipleUploads: true
                })
                .on('upload-success', function (file, response) {
                    UIkit.notification({ message: 'Upload successfully completed.', status: 'success' });
                })
                .on('upload-error', function (file, error, response)  {
                    UIkit.notification({ message: response.body, status: 'danger' });
                })
                .on('restriction-failed', function (file, error) {
                    UIkit.notification({ message: error, status: 'warning' });
                });
            });
        </script>
        {% endif %}
    </body>
</html>