name: Uploader
author: Helmut Kaufmann
description: Uploader for backd-defined Upload Form
tags: ["pages","upload"]
fields:
    form_id:
        label: Form ID (optional)
        type: text
        span: left
        comment: If left blank, the block expects the URL to contain a ?id=XXX and will render form XXX.
    text_position:
        label: Title and Description Position
        type: dropdown
        default: above
        span: right
        options:
            none: Do not render
            above: Above uploader widget
            below: Below uploader widget
        comment: Defines the position or absence of the title and description (as defind in the backend).
==
{# prefer the explicit field; otherwise take ?id=XXX from the page URL #}
{% set __fid = input('id')|default(form_id) %}
{% set form = __fid ? uploaderForm(__fid) : null %}
{% set user = input('user') %}

{% if not uploaderUserIsPermissioned(__fid, user) %}
    <div class="uk-container uk-margin">
        <div class="uk-alert-danger uk-card uk-card-body">
            Upload form not found or user not permissioned.
        </div>
    </div>
{% else %}
    
    <div class="uk-card uk-card-default uk-card-body uk-margin">
        {# ABOVE #}
        {% if text_position == 'above' %}
            <h3 class="uk-margin-small">{{ form.title }}</h3>
            {% if form.description %}
                <p class="uk-text-meta">{{ form.description|raw }}</p>
            {% endif %}
        {% endif %}
        <div id="uppy" class="uk-margin"></div>
        {# BELOW #}
        {% if text_position == 'below' %}
            <h3 class="uk-margin-small">{{ form.title }}</h3>
            {% if form.description %}
                <p class="uk-text-meta">{{ form.description|raw }}</p>
            {% endif %}
        {% endif %}
    </div>
    
    {# Uppy script and style #}
    <script src="https://releases.transloadit.com/uppy/v5.1.5/uppy.min.js"></script>
    <link rel="stylesheet" href="https://releases.transloadit.com/uppy/v5.1.5/uppy.css" />
    <style>
        /* Make Uppy Dashboard full width */
        .uppy-Dashboard,
        .uppy-Dashboard-inner {
            max-width: 100% !important;
            width: 100% !important;
        }
    </style>

    <script>
        // Get the userID from the server-side variable
        const userId = {{ user|json_encode|raw }}; 
        
        document.addEventListener("DOMContentLoaded", function() {
            // Build endpoint
            const currentPath = window.location.pathname.replace(/\/+$/, '');
            const formId = {{ form.form_id|json_encode|raw }};
            const endpoint = currentPath.match(new RegExp(formId + '$'))
                ? currentPath + '/upload'
                : '/mercator/uploader/endpoint/' + formId + '/' + userId;

            // Allowed file types (as .ext)
            const allowedTypesStr = "{{ form.allowed_types|split(',')|map(t => '.' ~ t|trim)|join(',') }}";
            const allowedTypes = allowedTypesStr
                ? allowedTypesStr.split(',').map(s => s.trim()).filter(Boolean)
                : null;

            // Convert MB to bytes, or null if not set
            const maxFileSize = {{ form.max_file_size and form.max_file_size > 0 ? (form.max_file_size * 1024 * 1024) : 'null' }};
            const maxTotalFileSize = {{ form.max_total_file_size and form.max_total_file_size > 0 ? (form.max_total_file_size * 1024 * 1024) : 'null' }};

            const notes = [];
            if (allowedTypes) notes.push('Allowed: ' + allowedTypes.join(' '));
            if (maxFileSize !== null) notes.push('Max per file: {{ form.max_file_size }} MB');
            if (maxTotalFileSize !== null) notes.push('Total: {{ form.max_total_file_size }} MB');

            const uppy = new Uppy.Uppy({
                autoProceed: {{ form.auto_upload_enabled ? 'true' : 'false' }},
                allowMultipleUploadBatches: true,
                restrictions: {
                    maxNumberOfFiles: null,
                    allowedFileTypes: allowedTypes,
                    maxFileSize: (maxFileSize === 'null') ? null : maxFileSize,
                    maxTotalFileSize: (maxTotalFileSize === 'null') ? null : maxTotalFileSize
                }
            })
            .use(Uppy.Dashboard, {
                inline: true,
                target: '#uppy',
                proudlyDisplayPoweredByUppy: false,
                showProgressDetails: true,
                note: notes.join(' | ')
            })
            {% if form.use_image_editor and not form.auto_upload_enabled %}
            .use(Uppy.ImageEditor)
            {% endif %}
            {% if form.client_resize_enabled %}
                .use(Uppy.Compressor, {
                    quality: {{ (form.client_resize_quality ?? 0.8) + 0 }},
                    maxWidth: {{ form.client_resize_max_width ?? 1920 }},
                    maxHeight: {{ form.client_resize_max_height ?? 1080 }},
                    preserveExif: {{ form.preserve_exif ? 'true' : 'false' }}
                })
            {% endif %}
            .use(Uppy.Webcam)
            .use(Uppy.Audio)
            .use(Uppy.ScreenCapture)
            .use(Uppy.XHRUpload, {
                endpoint: endpoint,
                fieldName: 'file',
                formData: true,
                allowMultipleUploads: true
            })
            .on('upload-success', function (file, response) {
                UIkit.notification({ message: 'Upload successfully completed.', status: 'success' });
            })
            .on('upload-error', function (file, error, response)  {
                UIkit.notification({ message: response.body, status: 'danger' });
            })
            .on('restriction-failed', function (file, error) {
                UIkit.notification({ message: error, status: 'warning' });
            });
        });
    </script>

{% endif %}
